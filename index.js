const _d3 = require('d3');
const jsdom = require('jsdom');
const phantom = require('phantom');
const fs = require('fs');
const path = require('path');
const randomstring = require('randomstring');
const os = require('os');

class PrettyData {
    /**
     * Creates a new instance of PrettyData.
     * 
     * @param {number} width the width of the SVG element
     * @param {number} height the height of the SVG element
     */
    constructor(width = 960, height = 600) {
        const document = jsdom.jsdom();
        const root = _d3.select(document.body);
        this._svg = root.append('svg').attr('xmlns', 'http://www.w3.org/2000/svg').attr('width', width).attr('height', height);
        this._document = document;
        this._root = root;
    }

    static _writeToFile(content, ext) {
        const filename = path.join(os.tmpdir(), `${randomstring.generate()}.${ext}`);
        return new Promise((resolve, reject) => {
            fs.writeFile(filename, content, {encoding: 'utf8'}, error => {
                if(error) {
                    return reject(error);
                }
                resolve(filename);
            })
        });
    }

    static _renderPng(svgFile) {
        const pngFile = svgFile.replace('.svg', '.png');
        return new Promise((resolve, reject) => {
            let _ph, _page, _content;
            phantom.create()
                .then(ph => (_ph = ph) && ph.createPage())
                .then(page => (_page = page) && page.open(`file://${svgFile}`))
                .then(() => _page.render(pngFile, {format: 'png'}))
                .then(() => (_page.close() && _ph.exit()))
                .then(() => resolve(pngFile))
                .catch(reject);
        });
    }

    /**
     * A promisified version of fs.rename exposed as a convenience
     * method to move the HTML, SVG and PNG files generated by PrettyData
     * to the desired location.
     * 
     * @link https://nodejs.org/api/fs.html#fs_fs_rename_oldpath_newpath_callback
     * 
     * @param {String} src source file path
     * @param {String} dest destination file path
     */
    static to(src, dest) {
        return new Promise((resolve, reject) => {
            fs.rename(src, dest, error => {
                if(error) {
                    return reject(error);
                }
                resolve(dest);
            });
        });
    }

    /**
     * Exposes the d3 library.
     */
    static get d3() {
        return _d3;
    }

    /**
     * Exposes the SVG element where d3 will render the data.
     */
    get $() {
        return this._svg;
    }

    /**
     * Writes the HTML document that contains the SVG generated by d3
     * to a file.
     * 
     * @param {string} styles the stylesheet
     * @returns {Promise} a promise that is resolved with the complete file path
     */
    html(styles) {
        return this.exportHtml(styles)
            .then(html => PrettyData._writeToFile(html, 'html'));
    }

    /**
     * Writes the SVG generated by d3 to a file.
     * 
     * @returns {Promise} a promise that is resolved with the complete file path
     */
    svg() {
        return this.exportSvg()
            .then(svg => PrettyData._writeToFile(svg, 'svg'));
    }
    
    /**
     * Renders the SVG generated by d3 into a PNG file.
     * 
     * @returns {Promise} a promise that is resolved with the complete file path
     */
    png() {
        return this.svg()
            .then(PrettyData._renderPng);
    }

    /**
     * Exports the SVG generated by d3 as a string.
     * 
     * @returns {Promise} a promised resolved with the SVG as a string
     */
    exportSvg() {
        return Promise.resolve(this._root.select('svg').node().outerHTML);
    }

    /**
     * Exports the HTML document that contains the SVG generated by d3 as a string
     * @param {string} styles the stylesheet
     * 
     * @returns {Promise} a promised resolved with the HTML as a string
     */
    exportHtml(styles) {
        if(styles) {
            const styleElement = this._document.createElement('style');
            styleElement.innerHTML = styles;
            this._document.querySelector('head').appendChild(styleElement);
        }
        return Promise.resolve(jsdom.serializeDocument(this._document));
    }
}

module.exports = PrettyData;